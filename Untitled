// EQ data & visualization
d3.json(queryUrl)
  .then(function (response) {

    var quakeMarkers = [];

    for (var i = 0; i < response.features.length; i++) {

      quakeMarkers.push(L.circle([response.features[i].geometry.coordinates[1], response.features[i].geometry.coordinates[0]], {
          color: getColor(response.features[i].properties.mag),
          fillOpacity: 1.0,
          radius: response.features[i].properties.mag * 25000,
          fillColor: getColor(response.features[i].properties.mag)

        }).bindPopup("<h1>Place: " + response.features[i].properties.place +
          "</h1> <hr> <h3>Time: " + new Date(response.features[i].properties.time) + "</h3><h3>Magnitude: " + response.features[i].properties.mag + " " +
          response.features[i].properties.magType + "</h3> <h3>Depth: " +
          response.features[i].geometry.coordinates[2] + " km</h3>")
        .addTo(myMap));
    }

    var legend = L.control({
      position: "bottomright"
    });

    console.log('legend:', legend);

    legend.onAdd = function () {

      var div = L.DomUtil.create("div", "info legend")

      var grades = [0, .5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]

      // var labels = ['<strong> THE TITLE </strong>'];

      // add label to the div
      div.innerHTML += '<strong> Grades </strong><br>'

      // Creating the colored labels and their respective grades
      for (var i = 0; i < grades.length; i++) {
        div.innerHTML +=
          '<i style="background-color:' + getColor(grades[i + 1]) + '"></i> ' +
          grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
      }

      return div;

    };

    legend.addTo(myMap);
  });

// Boundary data and visualization
d3.json('https://raw.githubusercontent.com/fraxen/tectonicplates/master/GeoJSON/PB2002_boundaries.json')
  .then(function(data){
    console.log('DATA FROM BOUANDARIES API CALL', data);

    
  })